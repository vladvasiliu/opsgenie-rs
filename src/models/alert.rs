/*
 * Python SDK for Opsgenie REST API
 *
 * Python SDK for Opsgenie REST API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@opsgenie.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Alert {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "tinyId", skip_serializing_if = "Option::is_none")]
    pub tiny_id: Option<String>,
    #[serde(rename = "alias", skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "acknowledged", skip_serializing_if = "Option::is_none")]
    pub acknowledged: Option<bool>,
    #[serde(rename = "isSeen", skip_serializing_if = "Option::is_none")]
    pub is_seen: Option<bool>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "snoozed", skip_serializing_if = "Option::is_none")]
    pub snoozed: Option<bool>,
    #[serde(rename = "snoozedUntil", skip_serializing_if = "Option::is_none")]
    pub snoozed_until: Option<String>,
    #[serde(rename = "count", skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(rename = "lastOccurredAt", skip_serializing_if = "Option::is_none")]
    pub last_occurred_at: Option<String>,
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<String>,
    #[serde(rename = "responders", skip_serializing_if = "Option::is_none")]
    pub responders: Option<Vec<crate::models::Responder>>,
    #[serde(rename = "integration", skip_serializing_if = "Option::is_none")]
    pub integration: Option<crate::models::AlertIntegration>,
    #[serde(rename = "report", skip_serializing_if = "Option::is_none")]
    pub report: Option<crate::models::AlertReport>,
    #[serde(rename = "actions", skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<String>>,
    #[serde(rename = "entity", skip_serializing_if = "Option::is_none")]
    pub entity: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "details", skip_serializing_if = "Option::is_none")]
    pub details: Option<::std::collections::HashMap<String, String>>,
}

impl Alert {
    pub fn new(id: String) -> Alert {
        Alert {
            id,
            tiny_id: None,
            alias: None,
            message: None,
            status: None,
            acknowledged: None,
            is_seen: None,
            tags: None,
            snoozed: None,
            snoozed_until: None,
            count: None,
            last_occurred_at: None,
            created_at: None,
            updated_at: None,
            source: None,
            owner: None,
            priority: None,
            responders: None,
            integration: None,
            report: None,
            actions: None,
            entity: None,
            description: None,
            details: None,
        }
    }
}


